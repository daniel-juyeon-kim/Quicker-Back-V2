name: Deploy

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: docker-compose.yml
          sparse-checkout-cone-mode: false
      - run: |
          set -e
          git checkout HEAD^

      - name: Send docker-compose.yml to ec2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/${{ secrets.EC2_USERNAME }}"

      - name: Deploy server to ec2
        uses: appleboy/ssh-action@v1.0.3
        env:
          PACKAGE_URL: ghcr.io/${{ github.repository }}:latest
        with:
          host: ${{ secrets.EC2_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          username: ${{ secrets.EC2_USERNAME }}
          script: |
            set -e

            # .env생성
            printf "%s\n" "${{ secrets.DOT_ENV }}" > .env && echo "IMAGE_NAME=${{ env.PACKAGE_URL }}" >> .env

            # docke-compose로 생성된 컨테이너 삭제
            if [ "$(docker compose ps -q)" ]; then
              docker compose down
              docker stop $(docker compose ps -a -q)
              docker rm $(docker compose ps -a -q)
            fi

            # 기존 이미지 삭제
            docker rmi ${{ env.PACKAGE_URL }}

            # github container registry 로그인
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # 새로 빌드된 이미지 설치
            docker pull ${{ env.PACKAGE_URL }}

            # 컨테이너 실행
            docker compose up -d

            # 환경정보 파일 삭제
            rm .docker/config.json
            rm docker-compose.yml
            rm .env
